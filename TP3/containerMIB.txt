containerMIB DEFINITIONS ::= BEGIN

--
-- Example MIB objects for agent module example implementations
--

--
-- Imports para aquilo que iremos utilizar na definição da MIB
--
IMPORTS
    MODULE-IDENTITY, OBJECT-TYPE, Integer32, experimental
    NOTIFICATION-TYPE                       FROM SNMPv2-SMI
    SnmpAdminString                         FROM SNMP-FRAMEWORK-MIB
    RowStatus, StorageType, DisplayString   FROM SNMPv2-TC
    InetAddressType, InetAddress            FROM INET-ADDRESS-MIB
;

--
-- Tirar dúvida acerca do experimental! container é o nível mais alto
--
containers MODULE-IDENTITY
    LAST-UPDATED "201812120000Z"
    ORGANIZATION "www.uminho.pt"
    CONTACT-INFO    
          "email:    bmfd.carvalho@gmail.com"
    DESCRIPTION
	"Rfid MIB module for TP3 project"
    REVISION     "201812070000Z"
    DESCRIPTION
	"First draft"
    REVISION "201812070000Z"
    ::= { experimental 2018 }

--
-- Start of containershipParam - grupo com objetos que representam um container novo a ser criado!
--
containershipParam OBJECT IDENTIFIER ::= { containers 1 }


-- Será colocado abaixo do containershipParam e indica o indicie da imagem a ser usada pelo container
indexParam OBJECT-TYPE
    SYNTAX      Integer32
    MAX-ACCESS  read-write
    STATUS      current
    DESCRIPTION
	"Identificador do indice da imagem a ser usada pelo container"
    ::= { containershipParam 0 }

-- Será colocado abaixo do containershipParam e indica o nome do container a ser criado
nomeParam OBJECT-TYPE
    SYNTAX      DisplayString
    MAX-ACCESS  read-write
    STATUS      current
    DESCRIPTION
	"Nome do container"
    ::= { containershipParam 1 }

--Será colocado abaixo do containershipParam e serve como uma flag
--Após a ativação da flag  (sinalizando a criação do container) dever ser efetuado um reset a todos os objetos deste grupo
flagParam OBJECT-TYPE
    SYNTAX      Integer32 (0..1)
    MAX-ACCESS  read-write
    STATUS      current
    DESCRIPTION
	"Flag do container"
    ::= { containershipParam 2 }

--
-- End of containershipParam
--


--
-- Start of containershipImageTable - grupo com a tabela de imagens disponíveis
--
containershipImageTable OBJECT-TYPE
    SYNTAX      SEQUENCE OF IMAGETableEntry
    MAX-ACCESS  not-accessible
    STATUS      current
    DESCRIPTION
	"A tabela contêm todas as imagens disponiveis, com duas colunas (indice de entrada) e nome da imagem"
    ::= { containers 2 }

-- Necessário definir o tipo, cada objeto deste tipo representa uma entrada na tabela
IMAGETableEntry ::= SEQUENCE {
	indexImage	    Integer32,
	image	    DisplayString
}

-- Um entrada na tabela, com a syntax que foi definida acima!
ImageTableEntry OBJECT-TYPE
    SYNTAX      IMAGETableEntry
    MAX-ACCESS  not-accessible
    STATUS      current
    DESCRIPTION
	"Uma linha da tabela de imagens"
    INDEX   { indexImage }
    ::= {containershipImageTable 0 }

-- Chave da tabela, meramente para fazer indexação
indexImage OBJECT-TYPE
    SYNTAX      Integer32 (1..32)
    MAX-ACCESS  read-write
    STATUS      current
    DESCRIPTION
	"Identificador da imagem (unico)"
    ::= { ImageTableEntry 1 }

-- Nome da imagem a ser utilizada no novo container
image OBJECT-TYPE
    SYNTAX      DisplayString
    MAX-ACCESS  read-write
    STATUS      current
    DESCRIPTION
	"Nome da imagem"
    ::= { ImageTableEntry 2 }


--
-- END of containershipImageTable
--

--
--Start of containershipContainerTable - grupo com a tabela de containers que foram criados
--
containershipContainerTable OBJECT-TYPE
    SYNTAX      SEQUENCE OF CONTAINERTableEntry
    MAX-ACCESS  not-accessible
    STATUS      current
    DESCRIPTION
	"A tabela contêm os containers que foram criados, com quatro colunas: indice de entrada, nome do container, indice da imagem que o originou e o seu estado"
    ::= { containers 3 }

--Necessário definir o tipo de cada entrada na tabela
CONTAINERTableEntry ::= SEQUENCE {
	indexContainer      Integer32,
	contain_name	    DisplayString,
    image_index         Integer32,
    statusC             Integer32,
    processador         Integer32
}

-- Uma entrada na tabela, com a syntax já definida acima!
ContainerTableEntry OBJECT-TYPE
    SYNTAX      CONTAINERTableEntry
    MAX-ACCESS  not-accessible
    STATUS      current
    DESCRIPTION
	"Uma linha da tabela de containers"
    INDEX   { indexContainer }
    ::= {containershipContainerTable 1 }

-- Indice, meramente para indexação
indexContainer OBJECT-TYPE
    SYNTAX      Integer32(1..32)
    MAX-ACCESS  read-only
    STATUS      current
    DESCRIPTION
	"Indice de entrada na tabela"
    ::= { ContainerTableEntry 1 }

-- Define o nome do container referente à entrada deste
contain_name OBJECT-TYPE
    SYNTAX      DisplayString
    MAX-ACCESS  read-only
    STATUS      current
    DESCRIPTION
	"Nome do container"
    ::= { ContainerTableEntry 2 }

-- Define o indice em que esta se encontrava na tabela containershipImageTable
image_index OBJECT-TYPE
    SYNTAX      Integer32
    MAX-ACCESS  read-only
    STATUS      current
    DESCRIPTION
	"Indice da imagem que originou o container"
    ::= { ContainerTableEntry 3 }

-- Representa o estado do container (up-1,down-2,removing-3,creating-4,changing-5)
statusC OBJECT-TYPE
    SYNTAX      Integer32(1..5)
    MAX-ACCESS  read-only
    STATUS      current
    DESCRIPTION
	"Estado do container"
    ::= { ContainerTableEntry 4 }

-- Indica a percentagem de processador a ser utilizado
processador OBJECT-TYPE
    SYNTAX      Integer32(1..100)
    MAX-ACCESS  read-only
    STATUS      current
    DESCRIPTION
	"Percentagem de processador a ser utilizada"
    ::= { ContainerTableEntry 5 }

--
-- End of containershipContainerTable
--

--
--Star of status-grupo com objetos escalares que representam informações acerca do agente!
-- Podemos adicionar mais parametros se acharmos pertinente
--
status OBJECT IDENTIFIER ::= { containers 4 }

data OBJECT-TYPE 
    SYNTAX      DisplayString
    MAX-ACCESS  read-only
    STATUS      current
    DESCRIPTION
    "Data em que o agente foi criado"
    ::= { status 0 }

--
-- END of status
--

END